package uk.gov.justice.digital.hmpps.personrecord.model.types.nationality

import uk.gov.justice.digital.hmpps.personrecord.client.model.court.commonplatform.PersonDetails
import uk.gov.justice.digital.hmpps.personrecord.client.model.court.event.LibraHearingEvent
import uk.gov.justice.digital.hmpps.personrecord.client.model.offender.ProbationCase
import uk.gov.justice.digital.hmpps.personrecord.client.model.prisoner.Prisoner
import uk.gov.justice.digital.hmpps.personrecord.extentions.nullIfBlank

enum class NationalityCode {
  AFGA,
  ALBA,
  ALGE,
  AMER,
  ASM,
  ANDO,
  ANGOL,
  AG,
  ANTIG,
  ARGEN,
  ARME,
  AB,
  AUSI,
  AUST,
  AZERB,
  BAHA,
  BAHR,
  BANGL,
  BARB,
  BELA,
  BELG,
  BELI,
  BENI,
  BM,
  BHUT,
  BOLI,
  BOSNI,
  MOTS,
  BRAZ,
  BRIT,
  VG,
  BRUN,
  BULG,
  HV,
  BURM,
  BURU,
  CAMB,
  CAMER,
  CANA,
  CAVER,
  KY,
  CF,
  CHAD,
  CHIL,
  CHINA,
  CXR,
  CGB,
  CDR,
  CCK,
  COLO,
  COMO,
  COND,
  CONR,
  CONG,
  COK,
  COSRI,
  CROAT,
  CUBA,
  CYPR,
  CZEC,
  DANE,
  DJIB,
  DOMI,
  DUTCH,
  AN,
  EATIM,
  ECUA,
  EGYP,
  EMIR,
  EQUATO,
  ERI,
  ESTO,
  ETHI,
  FO,
  FIJI,
  FILIP,
  FINN,
  FREN,
  FG,
  PYF,
  GABO,
  GAMB,
  GE,
  GERM,
  GHAN,
  GI,
  GREE,
  GL,
  GREN,
  GLP,
  GU,
  GUAT,
  GRN,
  GUIN,
  GUYA,
  HAIT,
  HOND,
  HKG,
  HUNG,
  ICE,
  CT,
  INDI,
  INDO,
  IRAN,
  IRAQ,
  IRISH,
  ISRA,
  ITAL,
  IVOR,
  JAM,
  JAP,
  JSM,
  JORD,
  KAZA,
  KENY,
  SW,
  KOS,
  KUWA,
  KN,
  LA,
  LATV,
  LEBA,
  LIBE,
  LIBY,
  LIEC,
  LITHU,
  LUX,
  MAC,
  MACE,
  MO,
  MG,
  MLAW,
  MALA,
  MALD,
  ML,
  MALT,
  MAN,
  MAR,
  MTQ,
  MARI,
  MAUR,
  MEXI,
  MICR,
  MOLD,
  MONA,
  MONGO,
  MNE,
  MS,
  MORO,
  LS,
  MOZA,
  NAMI,
  NAUR,
  NEPA,
  NCL,
  NZEA,
  NICA,
  NIGERIA,
  NIGER,
  NIU,
  VY,
  NFK,
  NKOR,
  NORW,
  OMAN,
  PAKN,
  PALA,
  PSE,
  PANA,
  PNGU,
  PARA,
  PERU,
  PCN,
  POLE,
  PORTU,
  PRI,
  QUAT,
  REF,
  REU,
  RID,
  ROMA,
  RUSS,
  RWAN,
  WA,
  SH,
  STLU,
  SALV,
  SAMO,
  SANM,
  STP,
  SRK,
  SAARA,
  SENE,
  SECR,
  SEYC,
  SRB,
  SILE,
  SING,
  SLOV,
  SLENE,
  SOLO,
  SOMA,
  SOAFR,
  SKOR,
  SSUDAN,
  SPAN,
  SRIL,
  STATE,
  SUDAN,
  SURIN,
  SWAZI,
  SWEDE,
  SWIS,
  SYRI,
  TAIW,
  TA,
  TANZ,
  THAI,
  TOGO,
  TKL,
  TNGA,
  TRIN,
  TRS,
  TUNI,
  TURK,
  TU,
  TCI,
  TV,
  UGAN,
  UKRA,
  UNKNOWN,
  URUG,
  UZBE,
  VTC,
  VENE,
  VIET,
  VC,
  WAL,
  YEMIN,
  ZAM,
  ZIM,
  ;

  companion object {
    fun from(probationCase: ProbationCase): NationalityCode? = probationCase.nationality?.value?.getNationalityOrUnknown(
      PROBATION_NATIONALITY_MAPPING,
    )

    fun from(prisoner: Prisoner): NationalityCode? = prisoner.nationality?.getNationalityOrUnknown(
      PRISON_NATIONALITY_MAPPING,
    )

    fun from(personDetails: PersonDetails?): NationalityCode? = personDetails?.nationalityCode?.getNationalityOrUnknown(
      COMMON_PLATFORM_NATIONALITY_MAPPING,
    )

    fun from(libraHearingEvent: LibraHearingEvent?): List<NationalityCode> = listOfNotNull(
      libraHearingEvent?.nationality1?.getNationalityOrUnknown(LIBRA_NATIONALITY_MAPPINGS),
      libraHearingEvent?.nationality2?.getNationalityOrUnknown(LIBRA_NATIONALITY_MAPPINGS),
    )

    private fun String?.getNationalityOrUnknown(nationalityMap: Map<String, NationalityCode>): NationalityCode? = this.normalize()?.let {
      nationalityMap[it] ?: UNKNOWN
    }

    private fun String?.normalize(): String? = this?.trim().nullIfBlank()?.uppercase()
  }
}
