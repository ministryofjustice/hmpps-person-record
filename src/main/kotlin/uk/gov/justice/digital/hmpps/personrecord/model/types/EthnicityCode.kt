package uk.gov.justice.digital.hmpps.personrecord.model.types

enum class EthnicityCode {
  A1,
  A2,
  A3,
  A4,
  A9,
  B1,
  B2,
  B9,
  M1,
  M2,
  M3,
  M9,
  MERGE,
  NS,
  O1,
  O2,
  O9,
  W1,
  W2,
  W3,
  W4,
  W5,
  W9,
  ETH03,
  ETH04,
  ETH05,
  W8,
  Z1,
  UN,
  ;

  companion object {

    val probationEthnicity = listOf(
      A1,
      A2,
      A3,
      A4,
      A9,
      B1,
      B2,
      B9,
      M1,
      M2,
      M3,
      M9,
      NS,
      O2,
      O9,
      W1,
      W2,
      W3,
      W4,
      W5,
      W9,
      ETH03,
      ETH04,
      ETH05,
      O1,
      Z1,
    ).associateBy { it.name }

    val commonPlatformEthnicity = listOf(
      A1,
      A2,
      A3,
      A4,
      A9,
      B1,
      B2,
      B9,
      M1,
      M2,
      M3,
      M9,
      NS,
      O2,
      O9,
      W1,
      W2,
      W3,
      W9,
      O1,
    ).associateBy { it.name }

    val prisonEthnicity: Map<String, EthnicityCode> = mapOf(
      "Asian/Asian British: Indian" to A1,
      "Asian/Asian British: Pakistani" to A2,
      "Asian/Asian British: Bangladeshi" to A3,
      "Asian/Asian British: Chinese" to A4,
      "Asian/Asian British: Any other backgr'nd" to A9,
      "Black/Black British: Caribbean" to B1,
      "Black/Black British: African" to B2,
      "Black/Black British: Any other backgr'nd" to B9,
      "Mixed: White and Black Caribbean" to M1,
      "Mixed: White and Black African" to M2,
      "Mixed: White and Asian" to M3,
      "Mixed: Any other background" to M9,
      "Needs to be confirmed following merge" to MERGE,
      "Prefer not to say" to NS,
      "Other: Arab" to O2,
      "Other: Any other background" to O9,
      "White: Eng./Welsh/Scot./N.Irish/British" to W1,
      "White: Irish" to W2,
      "White: Gypsy or Irish Traveller" to W3,
      "White: Roma" to W5,
      "White: Any other background" to W9,
      "Chinese" to O1,
      "White : Irish Traveller/Gypsy" to W8,
    )

    fun fromProbation(code: String?): EthnicityCode = probationEthnicity.getOrDefault(code, UN)

    fun fromCommonPlatform(code: String?): EthnicityCode = commonPlatformEthnicity.getOrDefault(code, UN)

    fun fromPrison(description: String?): EthnicityCode = prisonEthnicity.getOrDefault(description, UN)
  }
}
